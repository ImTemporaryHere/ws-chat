# Use root/example as user/password credentials
version: '3.9'

services:
  x-common-service: &common-service
    restart: always
    build:
      context: .
      dockerfile: prod.Dockerfile
    environment:
      - DEV_PLATFORM=DOCKER
    volumes:
      - ./envs:/app/envs
#    healthcheck:
#      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/health" ]
#      interval: 15s
#      timeout: 10s
#      retries: 5
#      start_period: 5s


  db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/data/db
    ports:
      - "${DB_PORT}:27017"
    networks:
      - my_network


  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - my_network


  backend:
    <<: *common-service
    depends_on:
      - db
      - redis
    build:
      context: .
      dockerfile: prod.Dockerfile
    environment:
      - DEV_PLATFORM=DOCKER
      - NODE_ENV=${NODE_ENV}
    volumes:
      - ./envs:/app/envs
    command: node dist/src/index.js
#    command: tail -f /dev/null
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          memory: 512m
          cpus: '0.25'
        reservations:
          cpus: '0.1'
    networks:
      - my_network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d/scaled.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      backend:
          condition: 'service_started'
    networks:
      - my_network

volumes:
  db_data:
  redis-data:
networks:
  my_network:
    name: prod_network


#  docker-compose -f docker-compose.prod.yml --env-file=docker.env.stag up -d
